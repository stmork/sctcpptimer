/** Generated by YAKINDU Statechart Tools code generator. */

#include "AbstractTimerStatechart.h"

/*! \file Implementation of the state machine 'Statechart'
*/


const sc_integer AbstractTimerStatechart::max = 2;
const sc_integer AbstractTimerStatechart::exit12 = 3100;
const sc_integer AbstractTimerStatechart::exit21 = 2600;



AbstractTimerStatechart::AbstractTimerStatechart()  :
counter(1),
a1(0),
b1(0),
a2(0),
b2(0),
c2(0),
timerService(sc_null),
ifaceOperationCallback(sc_null),
isExecuting(false)
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Statechart_last_state;
	
	clearInEvents();
}

AbstractTimerStatechart::~AbstractTimerStatechart()
{
}


using namespace statechart_events;

SctEvent* AbstractTimerStatechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

void AbstractTimerStatechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return;
	}
	switch(event->name)
	{
		case Statechart_main_region_First_time_event_0:
		{
			timeEvents[0] = true;
			break;
		}
		case Statechart_main_region_First_time_event_1:
		{
			timeEvents[1] = true;
			break;
		}
		case Statechart_main_region_First_time_event_2:
		{
			timeEvents[2] = true;
			break;
		}
		case Statechart_main_region_Second_time_event_0:
		{
			timeEvents[3] = true;
			break;
		}
		case Statechart_main_region_Second_time_event_1:
		{
			timeEvents[4] = true;
			break;
		}
		case Statechart_main_region_Second_time_event_2:
		{
			timeEvents[5] = true;
			break;
		}
		case Statechart_main_region_Second_time_event_3:
		{
			timeEvents[6] = true;
			break;
		}
		default:
			break;
	}
	delete event;
}

void AbstractTimerStatechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			break;
	}
}

AbstractTimerStatechartEventName AbstractTimerStatechart::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return Statechart_main_region_First_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[1])) {
		return Statechart_main_region_First_time_event_1;
	}
	if (evid == (sc_eventid)(&timeEvents[2])) {
		return Statechart_main_region_First_time_event_2;
	}
	if (evid == (sc_eventid)(&timeEvents[3])) {
		return Statechart_main_region_Second_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[4])) {
		return Statechart_main_region_Second_time_event_1;
	}
	if (evid == (sc_eventid)(&timeEvents[5])) {
		return Statechart_main_region_Second_time_event_2;
	}
	if (evid == (sc_eventid)(&timeEvents[6])) {
		return Statechart_main_region_Second_time_event_3;
	}
	return invalid_event;
}



sc_boolean AbstractTimerStatechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

sc_boolean AbstractTimerStatechart::isFinal() const
{
	return (stateConfVector[0] == main_region__final_);
}

sc_boolean AbstractTimerStatechart::check() {
	if(timerService == sc_null) {
		return false;
	}
	if (this->ifaceOperationCallback == sc_null) {
		return false;
	}
	return true;
}


void AbstractTimerStatechart::setTimerService(sc::timer::TimerServiceInterface* timerService)
{
	this->timerService = timerService;
}

sc::timer::TimerServiceInterface* AbstractTimerStatechart::getTimerService()
{
	return timerService;
}

sc_integer AbstractTimerStatechart::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void AbstractTimerStatechart::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean AbstractTimerStatechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case main_region_First : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_FIRST] == main_region_First
			);
		case main_region_Second : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_SECOND] == main_region_Second
			);
		case main_region__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION__FINAL_] == main_region__final_
			);
		default: return false;
	}
}

sc_integer AbstractTimerStatechart::getCounter() const
{
	return counter;
}

void AbstractTimerStatechart::setCounter(sc_integer value)
{
	this->counter = value;
}

sc_integer AbstractTimerStatechart::getMax() const
{
	return max;
}

sc_integer AbstractTimerStatechart::getExit12() const
{
	return exit12;
}

sc_integer AbstractTimerStatechart::getExit21() const
{
	return exit21;
}

sc_integer AbstractTimerStatechart::getA1() const
{
	return a1;
}

void AbstractTimerStatechart::setA1(sc_integer value)
{
	this->a1 = value;
}

sc_integer AbstractTimerStatechart::getB1() const
{
	return b1;
}

void AbstractTimerStatechart::setB1(sc_integer value)
{
	this->b1 = value;
}

sc_integer AbstractTimerStatechart::getA2() const
{
	return a2;
}

void AbstractTimerStatechart::setA2(sc_integer value)
{
	this->a2 = value;
}

sc_integer AbstractTimerStatechart::getB2() const
{
	return b2;
}

void AbstractTimerStatechart::setB2(sc_integer value)
{
	this->b2 = value;
}

sc_integer AbstractTimerStatechart::getC2() const
{
	return c2;
}

void AbstractTimerStatechart::setC2(sc_integer value)
{
	this->c2 = value;
}

void AbstractTimerStatechart::setOperationCallback(OperationCallback* operationCallback)
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions

sc_boolean AbstractTimerStatechart::check_main_region__choice_0_tr1_tr1()
{
	return (counter) >= (AbstractTimerStatechart::max);
}

void AbstractTimerStatechart::effect_main_region__choice_0_tr1()
{
	ifaceOperationCallback->dump((sc_string) "Exit");
	enseq_main_region__final__default();
}

void AbstractTimerStatechart::effect_main_region__choice_0_tr0()
{
	counter++;
	enseq_main_region_First_default();
}

/* Entry action for state 'First'. */
void AbstractTimerStatechart::enact_main_region_First()
{
	/* Entry action for state 'First'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), AbstractTimerStatechart::exit12, false);
	timerService->setTimer(this, (sc_eventid)(&timeEvents[1]), 301, true);
	timerService->setTimer(this, (sc_eventid)(&timeEvents[2]), 749, false);
	ifaceOperationCallback->dump((sc_string) "Enter first state");
}

/* Entry action for state 'Second'. */
void AbstractTimerStatechart::enact_main_region_Second()
{
	/* Entry action for state 'Second'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[3]), AbstractTimerStatechart::exit21, false);
	timerService->setTimer(this, (sc_eventid)(&timeEvents[4]), 250, true);
	timerService->setTimer(this, (sc_eventid)(&timeEvents[5]), 150, true);
	timerService->setTimer(this, (sc_eventid)(&timeEvents[6]), 350, false);
	ifaceOperationCallback->dump((sc_string) "Enter second state");
}

/* Exit action for state 'First'. */
void AbstractTimerStatechart::exact_main_region_First()
{
	/* Exit action for state 'First'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
	ifaceOperationCallback->dump((sc_string) "Exit first state");
}

/* Exit action for state 'Second'. */
void AbstractTimerStatechart::exact_main_region_Second()
{
	/* Exit action for state 'Second'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[4]));
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[5]));
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[6]));
	ifaceOperationCallback->dump((sc_string) "Exit second state");
}

/* 'default' enter sequence for state First */
void AbstractTimerStatechart::enseq_main_region_First_default()
{
	/* 'default' enter sequence for state First */
	enact_main_region_First();
	stateConfVector[0] = main_region_First;
}

/* 'default' enter sequence for state Second */
void AbstractTimerStatechart::enseq_main_region_Second_default()
{
	/* 'default' enter sequence for state Second */
	enact_main_region_Second();
	stateConfVector[0] = main_region_Second;
}

/* Default enter sequence for state null */
void AbstractTimerStatechart::enseq_main_region__final__default()
{
	/* Default enter sequence for state null */
	stateConfVector[0] = main_region__final_;
}

/* 'default' enter sequence for region main region */
void AbstractTimerStatechart::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* Default exit sequence for state First */
void AbstractTimerStatechart::exseq_main_region_First()
{
	/* Default exit sequence for state First */
	stateConfVector[0] = Statechart_last_state;
	exact_main_region_First();
}

/* Default exit sequence for state Second */
void AbstractTimerStatechart::exseq_main_region_Second()
{
	/* Default exit sequence for state Second */
	stateConfVector[0] = Statechart_last_state;
	exact_main_region_Second();
}

/* Default exit sequence for final state. */
void AbstractTimerStatechart::exseq_main_region__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for region main region */
void AbstractTimerStatechart::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of Statechart.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_First :
		{
			exseq_main_region_First();
			break;
		}
		case main_region_Second :
		{
			exseq_main_region_Second();
			break;
		}
		case main_region__final_ :
		{
			exseq_main_region__final_();
			break;
		}
		default: break;
	}
}

/* The reactions of state null. */
void AbstractTimerStatechart::react_main_region__choice_0()
{
	/* The reactions of state null. */
	if (check_main_region__choice_0_tr1_tr1())
	{ 
		effect_main_region__choice_0_tr1();
	}  else
	{
		effect_main_region__choice_0_tr0();
	}
}

/* Default react sequence for initial entry  */
void AbstractTimerStatechart::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	ifaceOperationCallback->dump((sc_string) "Start");
	enseq_main_region_First_default();
}

sc_integer AbstractTimerStatechart::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer AbstractTimerStatechart::main_region_First_react(const sc_integer transitioned_before) {
	/* The reactions of state First. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[0])
		{ 
			exseq_main_region_First();
			ifaceOperationCallback->dump((sc_string) "1 -> 2");
			enseq_main_region_Second_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		if (timeEvents[1])
		{ 
			a1++;
			ifaceOperationCallback->dump((sc_string) "Timer 301ms");
		} 
		if (timeEvents[2])
		{ 
			b1++;
			ifaceOperationCallback->dump((sc_string) "Single shot");
		} 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer AbstractTimerStatechart::main_region_Second_react(const sc_integer transitioned_before) {
	/* The reactions of state Second. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[3])
		{ 
			exseq_main_region_Second();
			ifaceOperationCallback->dump((sc_string) "2 -> choice");
			react_main_region__choice_0();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		if (timeEvents[4])
		{ 
			a2++;
		} 
		if (timeEvents[5])
		{ 
			b2++;
		} 
		if (timeEvents[6])
		{ 
			c2++;
		} 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer AbstractTimerStatechart::main_region__final__react(const sc_integer transitioned_before) {
	/* The reactions of state null. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void AbstractTimerStatechart::clearInEvents() {
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
	timeEvents[4] = false;
	timeEvents[5] = false;
	timeEvents[6] = false;
}

void AbstractTimerStatechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_First :
		{
			main_region_First_react(-1);
			break;
		}
		case main_region_Second :
		{
			main_region_Second_react(-1);
			break;
		}
		case main_region__final_ :
		{
			main_region__final__react(-1);
			break;
		}
		default: break;
	}
}

void AbstractTimerStatechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		dispatch_event(getNextEvent());
	} while (((((((timeEvents[0]) || (timeEvents[1])) || (timeEvents[2])) || (timeEvents[3])) || (timeEvents[4])) || (timeEvents[5])) || (timeEvents[6]));
	isExecuting = false;
}

void AbstractTimerStatechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default();
	isExecuting = false;
}

void AbstractTimerStatechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_main_region();
	isExecuting = false;
}



